// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go
//
// Generated by this command:
//
//	mockgen -source service/service.go -destination service/service_mock_test.go -package service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	models "pinder/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddPhoto mocks base method.
func (m *MockRepository) AddPhoto(userID uint64, photoKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPhoto", userID, photoKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPhoto indicates an expected call of AddPhoto.
func (mr *MockRepositoryMockRecorder) AddPhoto(userID, photoKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPhoto", reflect.TypeOf((*MockRepository)(nil).AddPhoto), userID, photoKey)
}

// ChooseCandidateAndCreatePairAttempt mocks base method.
func (m *MockRepository) ChooseCandidateAndCreatePairAttempt(userID uint64) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChooseCandidateAndCreatePairAttempt", userID)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChooseCandidateAndCreatePairAttempt indicates an expected call of ChooseCandidateAndCreatePairAttempt.
func (mr *MockRepositoryMockRecorder) ChooseCandidateAndCreatePairAttempt(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseCandidateAndCreatePairAttempt", reflect.TypeOf((*MockRepository)(nil).ChooseCandidateAndCreatePairAttempt), userID)
}

// CreateChat mocks base method.
func (m *MockRepository) CreateChat(user1, user2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", user1, user2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockRepositoryMockRecorder) CreateChat(user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockRepository)(nil).CreateChat), user1, user2)
}

// CreateEvent mocks base method.
func (m *MockRepository) CreateEvent(PAID uint64, eventType models.PEType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", PAID, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockRepositoryMockRecorder) CreateEvent(PAID, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockRepository)(nil).CreateEvent), PAID, eventType)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(phoneNumber, passHash string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", phoneNumber, passHash)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(phoneNumber, passHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), phoneNumber, passHash)
}

// DeleteUserPhoto mocks base method.
func (m *MockRepository) DeleteUserPhoto(userID uint64, photoKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPhoto", userID, photoKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPhoto indicates an expected call of DeleteUserPhoto.
func (mr *MockRepositoryMockRecorder) DeleteUserPhoto(userID, photoKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPhoto", reflect.TypeOf((*MockRepository)(nil).DeleteUserPhoto), userID, photoKey)
}

// FinishPairAttempt mocks base method.
func (m *MockRepository) FinishPairAttempt(PAID uint64, PAState models.PAState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishPairAttempt", PAID, PAState)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishPairAttempt indicates an expected call of FinishPairAttempt.
func (mr *MockRepositoryMockRecorder) FinishPairAttempt(PAID, PAState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishPairAttempt", reflect.TypeOf((*MockRepository)(nil).FinishPairAttempt), PAID, PAState)
}

// GetChat mocks base method.
func (m *MockRepository) GetChat(id uint64) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", id)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockRepositoryMockRecorder) GetChat(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockRepository)(nil).GetChat), id)
}

// GetChats mocks base method.
func (m *MockRepository) GetChats(userID uint64) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChats", userID)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChats indicates an expected call of GetChats.
func (mr *MockRepositoryMockRecorder) GetChats(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChats", reflect.TypeOf((*MockRepository)(nil).GetChats), userID)
}

// GetHangingPartner mocks base method.
func (m *MockRepository) GetHangingPartner(userID uint64) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHangingPartner", userID)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHangingPartner indicates an expected call of GetHangingPartner.
func (mr *MockRepositoryMockRecorder) GetHangingPartner(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHangingPartner", reflect.TypeOf((*MockRepository)(nil).GetHangingPartner), userID)
}

// GetLatestPairAttempt mocks base method.
func (m *MockRepository) GetLatestPairAttempt(user1, user2 uint64) (models.PairAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPairAttempt", user1, user2)
	ret0, _ := ret[0].(models.PairAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPairAttempt indicates an expected call of GetLatestPairAttempt.
func (mr *MockRepositoryMockRecorder) GetLatestPairAttempt(user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPairAttempt", reflect.TypeOf((*MockRepository)(nil).GetLatestPairAttempt), user1, user2)
}

// GetMessages mocks base method.
func (m *MockRepository) GetMessages(chatID uint64) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", chatID)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockRepositoryMockRecorder) GetMessages(chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockRepository)(nil).GetMessages), chatID)
}

// GetPendingPairAttemptByUserPair mocks base method.
func (m *MockRepository) GetPendingPairAttemptByUserPair(user1, user2 uint64) (models.PairAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingPairAttemptByUserPair", user1, user2)
	ret0, _ := ret[0].(models.PairAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingPairAttemptByUserPair indicates an expected call of GetPendingPairAttemptByUserPair.
func (mr *MockRepositoryMockRecorder) GetPendingPairAttemptByUserPair(user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingPairAttemptByUserPair", reflect.TypeOf((*MockRepository)(nil).GetPendingPairAttemptByUserPair), user1, user2)
}

// GetPreferences mocks base method.
func (m *MockRepository) GetPreferences(arg0 uint64) (*models.Preferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferences", arg0)
	ret0, _ := ret[0].(*models.Preferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferences indicates an expected call of GetPreferences.
func (mr *MockRepositoryMockRecorder) GetPreferences(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferences", reflect.TypeOf((*MockRepository)(nil).GetPreferences), arg0)
}

// GetProfile mocks base method.
func (m *MockRepository) GetProfile(arg0 uint64) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockRepositoryMockRecorder) GetProfile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRepository)(nil).GetProfile), arg0)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(id uint64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), id)
}

// GetUserByCreds mocks base method.
func (m *MockRepository) GetUserByCreds(phoneNumber, passHash string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCreds", phoneNumber, passHash)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCreds indicates an expected call of GetUserByCreds.
func (mr *MockRepositoryMockRecorder) GetUserByCreds(phoneNumber, passHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCreds", reflect.TypeOf((*MockRepository)(nil).GetUserByCreds), phoneNumber, passHash)
}

// GetUserPhotos mocks base method.
func (m *MockRepository) GetUserPhotos(userID uint64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPhotos", userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPhotos indicates an expected call of GetUserPhotos.
func (mr *MockRepositoryMockRecorder) GetUserPhotos(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPhotos", reflect.TypeOf((*MockRepository)(nil).GetUserPhotos), userID)
}

// GetWhoLikedMe mocks base method.
func (m *MockRepository) GetWhoLikedMe(userID uint64) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhoLikedMe", userID)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhoLikedMe indicates an expected call of GetWhoLikedMe.
func (mr *MockRepositoryMockRecorder) GetWhoLikedMe(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhoLikedMe", reflect.TypeOf((*MockRepository)(nil).GetWhoLikedMe), userID)
}

// PutPreferences mocks base method.
func (m *MockRepository) PutPreferences(arg0 models.Preferences) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPreferences", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPreferences indicates an expected call of PutPreferences.
func (mr *MockRepositoryMockRecorder) PutPreferences(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPreferences", reflect.TypeOf((*MockRepository)(nil).PutPreferences), arg0)
}

// PutProfile mocks base method.
func (m *MockRepository) PutProfile(arg0 models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProfile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutProfile indicates an expected call of PutProfile.
func (mr *MockRepositoryMockRecorder) PutProfile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfile", reflect.TypeOf((*MockRepository)(nil).PutProfile), arg0)
}

// SendMessage mocks base method.
func (m *MockRepository) SendMessage(chatID, sender uint64, contentType models.MsgContentType, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", chatID, sender, contentType, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockRepositoryMockRecorder) SendMessage(chatID, sender, contentType, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockRepository)(nil).SendMessage), chatID, sender, contentType, payload)
}

// MockFileStorage is a mock of FileStorage interface.
type MockFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageMockRecorder
}

// MockFileStorageMockRecorder is the mock recorder for MockFileStorage.
type MockFileStorageMockRecorder struct {
	mock *MockFileStorage
}

// NewMockFileStorage creates a new mock instance.
func NewMockFileStorage(ctrl *gomock.Controller) *MockFileStorage {
	mock := &MockFileStorage{ctrl: ctrl}
	mock.recorder = &MockFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorage) EXPECT() *MockFileStorageMockRecorder {
	return m.recorder
}

// DelPhoto mocks base method.
func (m *MockFileStorage) DelPhoto(ctx context.Context, photoKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelPhoto", ctx, photoKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelPhoto indicates an expected call of DelPhoto.
func (mr *MockFileStorageMockRecorder) DelPhoto(ctx, photoKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelPhoto", reflect.TypeOf((*MockFileStorage)(nil).DelPhoto), ctx, photoKey)
}

// MakeLink mocks base method.
func (m *MockFileStorage) MakeLink(ctx context.Context, photoKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeLink", ctx, photoKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeLink indicates an expected call of MakeLink.
func (mr *MockFileStorageMockRecorder) MakeLink(ctx, photoKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeLink", reflect.TypeOf((*MockFileStorage)(nil).MakeLink), ctx, photoKey)
}

// SavePhoto mocks base method.
func (m *MockFileStorage) SavePhoto(ctx context.Context, photo []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePhoto", ctx, photo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePhoto indicates an expected call of SavePhoto.
func (mr *MockFileStorageMockRecorder) SavePhoto(ctx, photo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePhoto", reflect.TypeOf((*MockFileStorage)(nil).SavePhoto), ctx, photo)
}

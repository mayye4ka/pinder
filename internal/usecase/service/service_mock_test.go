// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/service/service.go
//
// Generated by this command:
//
//	mockgen -source internal/usecase/service/service.go -destination internal/usecase/service/service_mock_test.go -package service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/mayye4ka/pinder/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddPhoto mocks base method.
func (m *MockRepository) AddPhoto(ctx context.Context, userID uint64, photoKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPhoto", ctx, userID, photoKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPhoto indicates an expected call of AddPhoto.
func (mr *MockRepositoryMockRecorder) AddPhoto(ctx, userID, photoKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPhoto", reflect.TypeOf((*MockRepository)(nil).AddPhoto), ctx, userID, photoKey)
}

// CreateChat mocks base method.
func (m *MockRepository) CreateChat(ctx context.Context, user1, user2 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChat", ctx, user1, user2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockRepositoryMockRecorder) CreateChat(ctx, user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockRepository)(nil).CreateChat), ctx, user1, user2)
}

// CreateEvent mocks base method.
func (m *MockRepository) CreateEvent(ctx context.Context, PAID uint64, eventType models.PEType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, PAID, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockRepositoryMockRecorder) CreateEvent(ctx, PAID, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockRepository)(nil).CreateEvent), ctx, PAID, eventType)
}

// CreatePairAttempt mocks base method.
func (m *MockRepository) CreatePairAttempt(ctx context.Context, user1, user2 uint64) (models.PairAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePairAttempt", ctx, user1, user2)
	ret0, _ := ret[0].(models.PairAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePairAttempt indicates an expected call of CreatePairAttempt.
func (mr *MockRepositoryMockRecorder) CreatePairAttempt(ctx, user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePairAttempt", reflect.TypeOf((*MockRepository)(nil).CreatePairAttempt), ctx, user1, user2)
}

// DeleteUserPhoto mocks base method.
func (m *MockRepository) DeleteUserPhoto(ctx context.Context, userID uint64, photoKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPhoto", ctx, userID, photoKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPhoto indicates an expected call of DeleteUserPhoto.
func (mr *MockRepositoryMockRecorder) DeleteUserPhoto(ctx, userID, photoKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPhoto", reflect.TypeOf((*MockRepository)(nil).DeleteUserPhoto), ctx, userID, photoKey)
}

// FinishPairAttempt mocks base method.
func (m *MockRepository) FinishPairAttempt(ctx context.Context, PAID uint64, PAState models.PAState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishPairAttempt", ctx, PAID, PAState)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishPairAttempt indicates an expected call of FinishPairAttempt.
func (mr *MockRepositoryMockRecorder) FinishPairAttempt(ctx, PAID, PAState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishPairAttempt", reflect.TypeOf((*MockRepository)(nil).FinishPairAttempt), ctx, PAID, PAState)
}

// GetAllValidUsers mocks base method.
func (m *MockRepository) GetAllValidUsers(ctx context.Context) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllValidUsers", ctx)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllValidUsers indicates an expected call of GetAllValidUsers.
func (mr *MockRepositoryMockRecorder) GetAllValidUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllValidUsers", reflect.TypeOf((*MockRepository)(nil).GetAllValidUsers), ctx)
}

// GetChat mocks base method.
func (m *MockRepository) GetChat(ctx context.Context, id uint64) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", ctx, id)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockRepositoryMockRecorder) GetChat(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockRepository)(nil).GetChat), ctx, id)
}

// GetChats mocks base method.
func (m *MockRepository) GetChats(ctx context.Context, userID uint64) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChats", ctx, userID)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChats indicates an expected call of GetChats.
func (mr *MockRepositoryMockRecorder) GetChats(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChats", reflect.TypeOf((*MockRepository)(nil).GetChats), ctx, userID)
}

// GetLastEvent mocks base method.
func (m *MockRepository) GetLastEvent(ctx context.Context, PAID uint64) (models.PairEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEvent", ctx, PAID)
	ret0, _ := ret[0].(models.PairEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEvent indicates an expected call of GetLastEvent.
func (mr *MockRepositoryMockRecorder) GetLastEvent(ctx, PAID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEvent", reflect.TypeOf((*MockRepository)(nil).GetLastEvent), ctx, PAID)
}

// GetLatestPairAttempt mocks base method.
func (m *MockRepository) GetLatestPairAttempt(ctx context.Context, user1, user2 uint64) (models.PairAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPairAttempt", ctx, user1, user2)
	ret0, _ := ret[0].(models.PairAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPairAttempt indicates an expected call of GetLatestPairAttempt.
func (mr *MockRepositoryMockRecorder) GetLatestPairAttempt(ctx, user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPairAttempt", reflect.TypeOf((*MockRepository)(nil).GetLatestPairAttempt), ctx, user1, user2)
}

// GetLatestPairAttemptByUserPair mocks base method.
func (m *MockRepository) GetLatestPairAttemptByUserPair(ctx context.Context, user1, user2 uint64) (models.PairAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPairAttemptByUserPair", ctx, user1, user2)
	ret0, _ := ret[0].(models.PairAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPairAttemptByUserPair indicates an expected call of GetLatestPairAttemptByUserPair.
func (mr *MockRepositoryMockRecorder) GetLatestPairAttemptByUserPair(ctx, user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPairAttemptByUserPair", reflect.TypeOf((*MockRepository)(nil).GetLatestPairAttemptByUserPair), ctx, user1, user2)
}

// GetMessage mocks base method.
func (m *MockRepository) GetMessage(ctx context.Context, msgID uint64) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, msgID)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockRepositoryMockRecorder) GetMessage(ctx, msgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockRepository)(nil).GetMessage), ctx, msgID)
}

// GetMessageTranscription mocks base method.
func (m *MockRepository) GetMessageTranscription(ctx context.Context, id uint64) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageTranscription", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMessageTranscription indicates an expected call of GetMessageTranscription.
func (mr *MockRepositoryMockRecorder) GetMessageTranscription(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageTranscription", reflect.TypeOf((*MockRepository)(nil).GetMessageTranscription), ctx, id)
}

// GetMessages mocks base method.
func (m *MockRepository) GetMessages(ctx context.Context, chatID uint64) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, chatID)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockRepositoryMockRecorder) GetMessages(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockRepository)(nil).GetMessages), ctx, chatID)
}

// GetPendingPairAttemptByUserPair mocks base method.
func (m *MockRepository) GetPendingPairAttemptByUserPair(ctx context.Context, user1, user2 uint64) (models.PairAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingPairAttemptByUserPair", ctx, user1, user2)
	ret0, _ := ret[0].(models.PairAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingPairAttemptByUserPair indicates an expected call of GetPendingPairAttemptByUserPair.
func (mr *MockRepositoryMockRecorder) GetPendingPairAttemptByUserPair(ctx, user1, user2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingPairAttemptByUserPair", reflect.TypeOf((*MockRepository)(nil).GetPendingPairAttemptByUserPair), ctx, user1, user2)
}

// GetPendingPairAttempts mocks base method.
func (m *MockRepository) GetPendingPairAttempts(ctx context.Context, user1ID uint64) ([]models.PairAttempt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingPairAttempts", ctx, user1ID)
	ret0, _ := ret[0].([]models.PairAttempt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingPairAttempts indicates an expected call of GetPendingPairAttempts.
func (mr *MockRepositoryMockRecorder) GetPendingPairAttempts(ctx, user1ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingPairAttempts", reflect.TypeOf((*MockRepository)(nil).GetPendingPairAttempts), ctx, user1ID)
}

// GetPreferences mocks base method.
func (m *MockRepository) GetPreferences(ctx context.Context, userID uint64) (models.Preferences, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferences", ctx, userID)
	ret0, _ := ret[0].(models.Preferences)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferences indicates an expected call of GetPreferences.
func (mr *MockRepositoryMockRecorder) GetPreferences(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferences", reflect.TypeOf((*MockRepository)(nil).GetPreferences), ctx, userID)
}

// GetProfile mocks base method.
func (m *MockRepository) GetProfile(ctx context.Context, userID uint64) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, userID)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockRepositoryMockRecorder) GetProfile(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockRepository)(nil).GetProfile), ctx, userID)
}

// GetUserPhotos mocks base method.
func (m *MockRepository) GetUserPhotos(ctx context.Context, userID uint64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPhotos", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPhotos indicates an expected call of GetUserPhotos.
func (mr *MockRepositoryMockRecorder) GetUserPhotos(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPhotos", reflect.TypeOf((*MockRepository)(nil).GetUserPhotos), ctx, userID)
}

// GetWhoLikedMe mocks base method.
func (m *MockRepository) GetWhoLikedMe(ctx context.Context, userID uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhoLikedMe", ctx, userID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhoLikedMe indicates an expected call of GetWhoLikedMe.
func (mr *MockRepositoryMockRecorder) GetWhoLikedMe(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhoLikedMe", reflect.TypeOf((*MockRepository)(nil).GetWhoLikedMe), ctx, userID)
}

// PutPreferences mocks base method.
func (m *MockRepository) PutPreferences(ctx context.Context, newPreferences models.Preferences) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPreferences", ctx, newPreferences)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPreferences indicates an expected call of PutPreferences.
func (mr *MockRepositoryMockRecorder) PutPreferences(ctx, newPreferences any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPreferences", reflect.TypeOf((*MockRepository)(nil).PutPreferences), ctx, newPreferences)
}

// PutProfile mocks base method.
func (m *MockRepository) PutProfile(ctx context.Context, newProfile models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutProfile", ctx, newProfile)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutProfile indicates an expected call of PutProfile.
func (mr *MockRepositoryMockRecorder) PutProfile(ctx, newProfile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutProfile", reflect.TypeOf((*MockRepository)(nil).PutProfile), ctx, newProfile)
}

// ReorderPhotos mocks base method.
func (m *MockRepository) ReorderPhotos(ctx context.Context, newOrder []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReorderPhotos", ctx, newOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReorderPhotos indicates an expected call of ReorderPhotos.
func (mr *MockRepositoryMockRecorder) ReorderPhotos(ctx, newOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReorderPhotos", reflect.TypeOf((*MockRepository)(nil).ReorderPhotos), ctx, newOrder)
}

// SaveMessageTranscription mocks base method.
func (m *MockRepository) SaveMessageTranscription(ctx context.Context, id uint64, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessageTranscription", ctx, id, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessageTranscription indicates an expected call of SaveMessageTranscription.
func (mr *MockRepositoryMockRecorder) SaveMessageTranscription(ctx, id, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessageTranscription", reflect.TypeOf((*MockRepository)(nil).SaveMessageTranscription), ctx, id, text)
}

// SendMessage mocks base method.
func (m *MockRepository) SendMessage(ctx context.Context, chatID, sender uint64, contentType models.MsgContentType, payload string) (models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, chatID, sender, contentType, payload)
	ret0, _ := ret[0].(models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockRepositoryMockRecorder) SendMessage(ctx, chatID, sender, contentType, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockRepository)(nil).SendMessage), ctx, chatID, sender, contentType, payload)
}

// MockFileStorage is a mock of FileStorage interface.
type MockFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageMockRecorder
}

// MockFileStorageMockRecorder is the mock recorder for MockFileStorage.
type MockFileStorageMockRecorder struct {
	mock *MockFileStorage
}

// NewMockFileStorage creates a new mock instance.
func NewMockFileStorage(ctrl *gomock.Controller) *MockFileStorage {
	mock := &MockFileStorage{ctrl: ctrl}
	mock.recorder = &MockFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorage) EXPECT() *MockFileStorageMockRecorder {
	return m.recorder
}

// DelProfilePhoto mocks base method.
func (m *MockFileStorage) DelProfilePhoto(ctx context.Context, photoKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelProfilePhoto", ctx, photoKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelProfilePhoto indicates an expected call of DelProfilePhoto.
func (mr *MockFileStorageMockRecorder) DelProfilePhoto(ctx, photoKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelProfilePhoto", reflect.TypeOf((*MockFileStorage)(nil).DelProfilePhoto), ctx, photoKey)
}

// GetChatVoice mocks base method.
func (m *MockFileStorage) GetChatVoice(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatVoice", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatVoice indicates an expected call of GetChatVoice.
func (mr *MockFileStorageMockRecorder) GetChatVoice(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatVoice", reflect.TypeOf((*MockFileStorage)(nil).GetChatVoice), ctx, key)
}

// MakeChatPhotoLink mocks base method.
func (m *MockFileStorage) MakeChatPhotoLink(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeChatPhotoLink", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeChatPhotoLink indicates an expected call of MakeChatPhotoLink.
func (mr *MockFileStorageMockRecorder) MakeChatPhotoLink(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeChatPhotoLink", reflect.TypeOf((*MockFileStorage)(nil).MakeChatPhotoLink), ctx, key)
}

// MakeChatVoiceLink mocks base method.
func (m *MockFileStorage) MakeChatVoiceLink(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeChatVoiceLink", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeChatVoiceLink indicates an expected call of MakeChatVoiceLink.
func (mr *MockFileStorageMockRecorder) MakeChatVoiceLink(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeChatVoiceLink", reflect.TypeOf((*MockFileStorage)(nil).MakeChatVoiceLink), ctx, key)
}

// MakeProfilePhotoLink mocks base method.
func (m *MockFileStorage) MakeProfilePhotoLink(ctx context.Context, photoKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeProfilePhotoLink", ctx, photoKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeProfilePhotoLink indicates an expected call of MakeProfilePhotoLink.
func (mr *MockFileStorageMockRecorder) MakeProfilePhotoLink(ctx, photoKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeProfilePhotoLink", reflect.TypeOf((*MockFileStorage)(nil).MakeProfilePhotoLink), ctx, photoKey)
}

// SaveChatPhoto mocks base method.
func (m *MockFileStorage) SaveChatPhoto(ctx context.Context, paylaod []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChatPhoto", ctx, paylaod)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveChatPhoto indicates an expected call of SaveChatPhoto.
func (mr *MockFileStorageMockRecorder) SaveChatPhoto(ctx, paylaod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChatPhoto", reflect.TypeOf((*MockFileStorage)(nil).SaveChatPhoto), ctx, paylaod)
}

// SaveChatVoice mocks base method.
func (m *MockFileStorage) SaveChatVoice(ctx context.Context, payload []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChatVoice", ctx, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveChatVoice indicates an expected call of SaveChatVoice.
func (mr *MockFileStorageMockRecorder) SaveChatVoice(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChatVoice", reflect.TypeOf((*MockFileStorage)(nil).SaveChatVoice), ctx, payload)
}

// SaveProfilePhoto mocks base method.
func (m *MockFileStorage) SaveProfilePhoto(ctx context.Context, photo []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProfilePhoto", ctx, photo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProfilePhoto indicates an expected call of SaveProfilePhoto.
func (mr *MockFileStorageMockRecorder) SaveProfilePhoto(ctx, photo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProfilePhoto", reflect.TypeOf((*MockFileStorage)(nil).SaveProfilePhoto), ctx, photo)
}

// MockUserNotifier is a mock of UserNotifier interface.
type MockUserNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockUserNotifierMockRecorder
}

// MockUserNotifierMockRecorder is the mock recorder for MockUserNotifier.
type MockUserNotifierMockRecorder struct {
	mock *MockUserNotifier
}

// NewMockUserNotifier creates a new mock instance.
func NewMockUserNotifier(ctrl *gomock.Controller) *MockUserNotifier {
	mock := &MockUserNotifier{ctrl: ctrl}
	mock.recorder = &MockUserNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserNotifier) EXPECT() *MockUserNotifierMockRecorder {
	return m.recorder
}

// NotifyLiked mocks base method.
func (m *MockUserNotifier) NotifyLiked(ctx context.Context, userId uint64, notification models.LikeNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyLiked", ctx, userId, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyLiked indicates an expected call of NotifyLiked.
func (mr *MockUserNotifierMockRecorder) NotifyLiked(ctx, userId, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyLiked", reflect.TypeOf((*MockUserNotifier)(nil).NotifyLiked), ctx, userId, notification)
}

// NotifyMatch mocks base method.
func (m *MockUserNotifier) NotifyMatch(ctx context.Context, userId uint64, notification models.MatchNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMatch", ctx, userId, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMatch indicates an expected call of NotifyMatch.
func (mr *MockUserNotifierMockRecorder) NotifyMatch(ctx, userId, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMatch", reflect.TypeOf((*MockUserNotifier)(nil).NotifyMatch), ctx, userId, notification)
}

// SendMessage mocks base method.
func (m *MockUserNotifier) SendMessage(ctx context.Context, userId uint64, notification models.MessageSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, userId, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockUserNotifierMockRecorder) SendMessage(ctx, userId, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockUserNotifier)(nil).SendMessage), ctx, userId, notification)
}

// SendTranscribedMessage mocks base method.
func (m *MockUserNotifier) SendTranscribedMessage(ctx context.Context, userId uint64, notification models.MessageTranscibed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTranscribedMessage", ctx, userId, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTranscribedMessage indicates an expected call of SendTranscribedMessage.
func (mr *MockUserNotifierMockRecorder) SendTranscribedMessage(ctx, userId, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTranscribedMessage", reflect.TypeOf((*MockUserNotifier)(nil).SendTranscribedMessage), ctx, userId, notification)
}

// MockStt is a mock of Stt interface.
type MockStt struct {
	ctrl     *gomock.Controller
	recorder *MockSttMockRecorder
}

// MockSttMockRecorder is the mock recorder for MockStt.
type MockSttMockRecorder struct {
	mock *MockStt
}

// NewMockStt creates a new mock instance.
func NewMockStt(ctrl *gomock.Controller) *MockStt {
	mock := &MockStt{ctrl: ctrl}
	mock.recorder = &MockSttMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStt) EXPECT() *MockSttMockRecorder {
	return m.recorder
}

// PutTask mocks base method.
func (m *MockStt) PutTask(ctx context.Context, task models.SttTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutTask indicates an expected call of PutTask.
func (mr *MockSttMockRecorder) PutTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTask", reflect.TypeOf((*MockStt)(nil).PutTask), ctx, task)
}
